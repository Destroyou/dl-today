const { Telegraf, Markup, Extra } = require('telegraf')

require('dotenv').config()

const { sendTimetable, timetableToday, timetableTomorrow } = require('./timetable.js')
const { logger, storeUsers, onlyBot, onlyAdmin } = require('./middlewares')
const { memoryDB, db } = require('./db')

const bot = new Telegraf(process.env.TOKEN)
const extra = Extra.HTML().webPreview(false);
const keyboard = (buttons) => Markup
    .keyboard(['–õ–µ–∫—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è', '–õ–µ–∫—Ü–∏–∏ –∑–∞–≤—Ç—Ä–∞', ...buttons])
    .resize()
    .extra()

const timesStart = ['07:45', '09:30', '11:15', '13:10', '14:55', '16:40', '12:15']
const timesEnd = ['09:20', '11:05', '12:50', '14:45', '16:30', '18:15', '12:42']

require('./cron')(bot, timesStart, timesEnd)

bot.catch((e) => console.log('Bot error: ', e))

const setNotification = (id, value) => {
    db.get(`users.${id}`)
        .set('notificationEnabled', value)
        .write()
}

const enableNotification = ({ from, reply }) => {
    setNotification(from.id, true)

    return reply('–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ª–µ–∫—Ü–∏–∏', keyboard(['–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']))
}

const disableNotification = ({ from, reply }) => {
    setNotification(from.id, false)

    return reply('–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–µ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ª–µ–∫—Ü–∏–∏', keyboard(['–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']))
} 

bot.use(storeUsers)
bot.use(logger)

bot.on('new_chat_members', ctx => {
    console.log(ctx.message.chat)
})

bot.start(onlyBot, ({ reply, from }) => {
    const user = db.get(`users.${from.id}`).value()

    return reply('üëÄ', keyboard([user.notificationEnabled
        ? '–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        : '–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']))
})

bot.hears('–õ–µ–∫—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è', onlyBot, ctx => sendTimetable(ctx, timetableToday()))
bot.hears('–õ–µ–∫—Ü–∏–∏ –∑–∞–≤—Ç—Ä–∞', onlyBot, ctx => sendTimetable(ctx, timetableTomorrow()))
bot.command('/today', ctx => sendTimetable(ctx, timetableToday()))
bot.command('/tomorrow', ctx => sendTimetable(ctx, timetableTomorrow()))

bot.hears('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', onlyBot, enableNotification)
bot.hears('–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', onlyBot, disableNotification)
bot.command('/enable_notification', onlyBot, enableNotification)
bot.command('/disable_notification', onlyBot, disableNotification)

bot.command('/time', onlyAdmin, onlyBot, ({ reply }) => reply(new Date().toLocaleString()))

bot.command('/clear', onlyAdmin, async ({ reply, deleteMessage }) => {
    const msg = await reply('–î–∞.', Markup.removeKeyboard().extra())

    return deleteMessage(msg.message_id)
})

bot.on('inline_query', ({ answerInlineQuery }) => {
    try {
        const formattedTimetableToday = timetableToday()
        const formattedTimetableTomorrow = timetableTomorrow()

        return answerInlineQuery([
            {
                type: 'article',
                id: 'today',
                title: '–õ–µ–∫—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è',
                input_message_content: {
                    message_text: formattedTimetableToday ? `<b>–õ–µ–∫—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è</b>\n\n${formattedTimetableToday}` : '–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç',
                    ...extra,
                },
            },
            {
                type: 'article',
                id: 'tomorrow',
                title: '–õ–µ–∫—Ü–∏–∏ –∑–∞–≤—Ç—Ä–∞',
                input_message_content: {
                    message_text: formattedTimetableTomorrow ?  `<b>–õ–µ–∫—Ü–∏–∏ –∑–∞–≤—Ç—Ä–∞</b>\n\n${formattedTimetableTomorrow}` : '–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç',
                    ...extra,
                },
            }
        ], {
            cache_time: 20,
        })
    } catch (e) {
        console.log(e)
    }
})

bot.command('update', onlyAdmin, onlyBot, async ({ reply }) => {
    try {
        await memoryDB.load()

        return reply('Updated')
    } catch (e) {
        console.log('Update error: ', e)

        return reply(`Update error: ${JSON.stringify(e)}`)
    }
})

module.exports = bot
